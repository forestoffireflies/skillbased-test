#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>

int main() {
    // Create socket
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        perror("socket");
        exit(1);
    }

    // Bind socket to an address
    struct sockaddr_in server_address;
    server_address.sin_family = AF_INET;
    server_address.sin_port = htons(12345); // Replace with desired port number
    server_address.sin_addr.s_addr = INADDR_ANY;
    if (bind(server_socket, (struct sockaddr *)&server_address, sizeof(server_address)) == -1) {
        perror("bind");
        exit(1);
    }

    // Listen for connections
    if (listen(server_socket, 1) == -1) {
        perror("listen");
        exit(1);
    }

    printf("Server started. Waiting for a client...\n");

    // Accept a client connection
    struct sockaddr_in client_address;
    socklen_t client_address_length = sizeof(client_address);
    int client_socket = accept(server_socket, (struct sockaddr *)&client_address, &client_address_length);
    if (client_socket == -1) {
        perror("accept");
        exit(1);
    }

    // Generate a random number between 50,000 and 80,000
    srand(time(NULL));
    int random_number = rand() % 30001 + 50000;

    // Send the random number to the client
    if (send(client_socket, &random_number, sizeof(random_number), 0) == -1) {
        perror("send");
        exit(1);
    }

    printf("Random number %d sent to the client.\n", random_number);

    // Close the sockets
    close(client_socket);
    close(server_socket);

    return 0;
}
